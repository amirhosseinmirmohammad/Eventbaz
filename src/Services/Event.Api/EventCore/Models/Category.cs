using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel;
using EventCore.Enums;
using Commons.Models;

namespace EventCore.Models
{
    /// <summary>
    /// Represents a Category model that defines categories for events.
    /// </summary>
    public class Category : BaseModel
    {
        /// <summary>
        /// Unique identifier for the category. It is automatically generated by the database.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [ScaffoldColumn(false)]
        [Bindable(false)]
        public int Id { get; set; }

        /// <summary>
        /// The title or name of the category (e.g., Sports, Music, Technology).
        /// </summary>
        public string Title { get; set; }

        /// <summary>
        /// The status of the category, represented by the CategoryStatus enum.
        /// </summary>
        public CategoryStatus Status { get; set; }

        /// <summary>
        /// Parent category identifier. If the category doesn't have a parent, this value will be null.
        /// </summary>
        public int? ParentId { get; set; }

        /// <summary>
        /// The parent category (self-referencing). Indicates that a category can be a subcategory of another category.
        /// </summary>
        public virtual Category Parent { get; set; }

        /// <summary>
        /// List of subcategories under this category. This property represents that a category can have multiple subcategories.
        /// </summary>
        public virtual ICollection<Category> SubCategories { get; set; }

        /// <summary>
        /// List of events that belong to this category.
        /// </summary>
        public virtual ICollection<Event> Events { get; set; }
    }
}